pipeline {
    agent any
     triggers { 
        pollSCM('0 */3 * * *') 
    }
     environment {
        RES_LINT    = ' ' 
        RES_TEST    = ' '
        RES_UPDATE  = ' '
        RES_PUSH    = ' '
        RES_DEPLOY  = ' '
    }
    parameters {
        string(name: 'ejecutor', defaultValue: 'Hachemico', description: 'Nombre persona que realiza la accion.')
        string(name: 'motivo', defaultValue: 'Actualizar', description: 'Razon por la que se realiza la acción.')
        string(name: 'correo_notificacion', defaultValue: 'hachemico@gmail.com', description: 'Correo al que se envia la notificación.')
    }
   
    stages {
            stage('linter') {
            steps {
                script{
                    RES_LINT = sh( script: "npm run lint", returnStatus: true)
                }
            }
        }
        stage('test') {
            steps {
                script{
                    sh "npm install cypress -g"
                    sh " npm ci -y"
                    sh " npm run dev &"
                    RES_TEST = sh( script: "NO_COLOR=1 ./node_modules/.bin/cypress run ", returnStatus: true)
                }
            }
        }
        stage('Update_Readme') {
            steps {
                script{
                    sh ("chmod 777 -R ./jenkinsScripts/Update_readme.js" )
                    RES_UPDATE = sh ( script: "node jenkinsScripts/Update_readme.js $RES_TEST", returnStatus: true)
                }
            }
        }
        stage('push_changes') {
            steps{
                 
                    sh ("chmod 777 -R ./jenkinsScripts/Push_changes.js" )
                    withCredentials([usernamePassword(credentialsId: 'github_Token', passwordVariable: 'TOKEN', usernameVariable: 'USER')]) {
                        script{
                            sh(" git config --global user.email \'hachemico@gmail.com\'")
                            sh(" git remote set-url origin https://$TOKEN@github.com/hachemico/practica_jenkins.git")
                            sh(" git add .")
                            sh(" git commit -m 'Pipeline ejecutada por $params.ejecutor . MOTIVO: $params.motivo'")
                            RES_PUSH = sh ( script: "git push origin HEAD:main ", returnStatus: true)
                        }
                    }
                }
        }
        stage('Deploy_to_Vercel'){
            steps{
                
                withCredentials([string(credentialsId: 'vercel_Token', variable: 'VTOKEN')]) {
                    script{
                        if((RES_LINT == 0) && (RES_TEST == 0) && (RES_UPDATE == 0) && (RES_PUSH == 0)){
                               
                            RES_DEPLOY = sh ( script: "vercel . --token $VTOKEN --confirm --name practica-jenkins", returnStatus: true)
                        }
                    }
                } 
            }
        }
            stage('Notificacion'){
            steps{
                sh ("npm install nodemailer" )
                withCredentials([string(credentialsId: 'gmail_Token', variable: 'GTOKEN')]) {
                    script{
                               
                        RES4 = sh ( script: "node jenkinsScripts/Email.js $RES_LINT $RES_TEST $RES_UPDATE $RES_PUSH $RES_DEPLOY $GTOKEN $GEMAIL $params.correo_notificacion", returnStatus: true)
                    }
                } 
            }
        }
        // stage('Parallel Stage') {
        //     parallel{
        //         stage('paralel1') {
        //             steps {
        //                 echo "Tarea Paralelo 1"
        //             }
        //         }
        //         stage('paralel2') {
        //             steps {
        //                 echo "Tarea Paralelo 2"
        //             }
        //         }
        //     }
        // }
    }
}
